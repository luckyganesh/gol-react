{"version":3,"sources":["Game.js","index.js"],"names":["createArray","length","filler","Array","fill","generateBoard","rows","columns","map","x","sum","a","b","findNeighboursState","row","column","board","mainrow","leftrow","rightrow","cells","push","filter","undefined","reduce","nextStateOfCell","totalAliveNeighbours","currentStateoOfCell","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isStarted","rowId","col","colId","className","id","react_default","createElement","e","_e$target$id$split","target","split","_e$target$id$split2","slicedToArray","console","log","slice","setState","_this2","timerId","setInterval","newBoard","rowNo","stateOfElement","columnNo","noOfAlives","newGeneration","clearInterval","stop","onclick","handleClick","bind","onClick","start","reset","React","Component","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.507c9ebd.chunk.js","sourcesContent":["import React from 'react';\nimport './game.css';\n\nconst createArray = function (length, filler) {\n    return new Array(length).fill(filler);\n}\n\nconst generateBoard = function (rows, columns) {\n    return createArray(rows, rows).map((x) => createArray(columns, 0));\n}\n\nconst newGeneration = function (board) {\n    let newBoard = board.map((row, rowNo) =>\n        row.map((stateOfElement, columnNo) => {\n            let noOfAlives = findNeighboursState(rowNo, columnNo, board);\n            return nextStateOfCell(noOfAlives, stateOfElement);\n        }));\n    console.log(newBoard);\n    return newBoard;\n}\n\nconst sum = (a, b) => a + b;\n\nconst findNeighboursState = function (row, column, board) {\n    let mainrow = board[row]\n    let leftrow = board[row - 1] || [];\n    let rightrow = board[row + 1] || [];\n    let cells = [mainrow[column - 1], mainrow[column + 1]]\n    cells.push(leftrow[column])\n    cells.push(leftrow[column + 1], leftrow[column - 1])\n    cells.push(rightrow[column], rightrow[column + 1], rightrow[column - 1])\n    cells = cells.filter((x) => x !== undefined)\n    return cells.reduce(sum, 0);\n}\n\n\nconst nextStateOfCell = function (totalAliveNeighbours, currentStateoOfCell) {\n    let result = [0, 0, currentStateoOfCell, 1, 0, 0, 0, 0, 0]\n    return result[totalAliveNeighbours];\n}\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const board = generateBoard(10, 10);\n        this.state = { board }\n        this.isStarted = false;\n    }\n\n    generateBoard() {\n        return this.state.board.map((row, rowId) => {\n            const columns = row.map((col, colId) => {\n                let className = \"alive\"\n                if (col === 0) {\n                    className = \"dead\"\n                }\n                const id = rowId + \"_\" + colId\n                return (<td id={id} className={className}></td>)\n            });\n            return (<tr>{columns}</tr>)\n        })\n    }\n\n    handleClick(e) {\n        const [rowId, colId] = e.target.id.split(\"_\");\n        console.log(rowId,colId);\n        const board = this.state.board.slice();\n        board[rowId][colId] = 1 - board[rowId][colId];\n\n        this.setState({board});\n    }\n\n    start() {\n        this.isStarted = true;\n        this.timerId = setInterval(() => {\n        const board = newGeneration(this.state.board);\n        this.setState({board})\n        },100)\n    }\n\n    stop(){\n        this.isStarted= false;\n        clearInterval(this.timerId);\n        this.setState(state => state);\n    }\n\n    reset(){\n        this.stop();\n        this.setState({\n            board:generateBoard(10,10)\n        })\n    }\n    render() {\n        let onclick = null;\n        if (!this.isStarted) {\n            onclick = this.handleClick.bind(this);\n        }\n        return (\n            <div>\n                <div className=\"heading\">Game of Life</div>\n                <table onClick={onclick} className=\"table\">{this.generateBoard()}</table>\n                <div className=\"options\">\n                    <button onClick={this.start.bind(this)}>Start</button>\n                    <button onClick={this.stop.bind(this)}>Stop</button>\n                    <button onClick={this.reset.bind(this)}>Reset</button>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\nReactDOM.render(<Game />,document.getElementById('root'));"],"sourceRoot":""}